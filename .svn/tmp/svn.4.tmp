package com.dataom.app.svc;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.util.Calendar;
import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import com.dataom.app.domain.Segment;
import com.dataom.app.domain.SegmentCondition;
import com.dataom.app.web.PixelServer;
import com.mongodb.BasicDBList;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.MapReduceCommand;
import com.mongodb.QueryBuilder;

@Service
public class MapReduceJobsImpl implements MapReduceJobs {

	@Autowired
	private MongoTemplate mongo;
	
	@Override
        @Scheduled(cron= "0 10 8 * * *")
	public void dailyTotals() {
            System.out.println(new Date() + " Starting dailytotalsjob." );
		DB db = mongo.getDb();
		DBCollection dbCol =  db.getCollection("dailyattributes" );
		
		Calendar today = Calendar.getInstance();
		today.set(Calendar.HOUR, 0);
		today.set(Calendar.MINUTE, 0);
		today.set(Calendar.SECOND, 0);
		
		Calendar prevday = Calendar.getInstance();
		prevday.set(Calendar.HOUR, 0);
		prevday.set(Calendar.MINUTE, 0);
		prevday.set(Calendar.SECOND, 0);
		prevday.add(Calendar.DATE, -1);
		
		QueryBuilder qb = QueryBuilder.start("_id.day").greaterThanEquals(prevday.getTime()).lessThan(today.getTime());
		
                 long value=0;
		try {
                    value=dbCol.count(qb.get());
                    
		} catch (Exception e) {
			e.printStackTrace();
		}
                
		try {
			dbCol.mapReduce(getFile("aggregatedaily/mapdailyuvattributevise.js"), getFile("aggregatedaily/reducedailyuvattributevise.js"), "dailyuvattributes", MapReduceCommand.OutputType.REPLACE, qb.get());
		} catch (Exception e) {
			e.printStackTrace();
		}
                
                DBCollection dbColForUV =  db.getCollection("dailyuvtotal" );
        
                	try {
                     BasicDBList dbl = new BasicDBList();
                    dbl.add(new BasicDBObject("_id",prevday));
                    dbl.add(new BasicDBObject("uniqueuv",value) );                    
                    dbColForUV.insert(dbl);                    
		} catch (Exception e) {
			e.printStackTrace();
		}
        
		
                        
                        
		System.out.println(new Date() + " Finished dailytotals job." );
	}

	@Override
	@Scheduled(cron= "0 10 0 * * *")
	public void dailyAttributes() {
		System.out.println(new Date() + " Starting dailyaggregate job." );
		DB db = mongo.getDb();
		DBCollection dbCol =  db.getCollection("raw" + Utils.getDateString(-1));
		
		try {
			dbCol.mapReduce(getFile("aggregatedaily/map.js"), getFile("aggregatedaily/reduce.js"), "dailyattributes", MapReduceCommand.OutputType.MERGE, null);
		} catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println(new Date() + " Finished dailyaggregate job." );
	}
	
	@Override
	@Scheduled(cron= "0 30 1 * * *")
	public void last7dayAggr() {
		multiDayMapReduce(7);
	}
	
	@Override
	@Scheduled(cron= "0 15 2 * * *")
	public void last14dayAggr() {
		multiDayMapReduce(14);
	}
	
	@Override
	@Scheduled(cron= "0 0 3 * * *")
	public void last30dayAggr() {
		multiDayMapReduce(30);
	}
	
	@Override
	@Scheduled(cron= "0 0 4 * * *")
	public void last60dayAggr() {
		multiDayMapReduce(60);
	}
	
	@Override
	public void multiDayMapReduce(int days) {
		System.out.println(new Date() + " Starting multiDayMapReduce job for days " + days);
		DB db = mongo.getDb();
		DBCollection dbCol =  db.getCollection("dailyattributes");
		
		Calendar today = Calendar.getInstance();
		today.set(Calendar.HOUR, 0);
		today.set(Calendar.MINUTE, 0);
		today.set(Calendar.SECOND, 0);
		
		Calendar prevday = Calendar.getInstance();
		prevday.set(Calendar.HOUR, 0);
		prevday.set(Calendar.MINUTE, 0);
		prevday.set(Calendar.SECOND, 0);
		prevday.add(Calendar.DATE, -days);
		
		QueryBuilder qb = QueryBuilder.start("_id.day").greaterThanEquals(prevday.getTime()).lessThan(today.getTime());
		
		try {
			dbCol.mapReduce(getFile("aggregate7/map.js"), getFile("aggregate7/reduce.js"), "aggregate" + days + "d", MapReduceCommand.OutputType.REPLACE, qb.get());
		} catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println(new Date() + " Finished multidailyaggregate job." );
                
	}
	

	@Override
	public void dailySizes() {
		// TODO Auto-generated method stub

	}
	
	private String getFile(String jsFile) throws IOException {
		InputStreamReader reader = new InputStreamReader(new FileInputStream(PixelServer.mapReducePath + "/" + jsFile));
		StringBuilder strBuilder = new StringBuilder();
		
		char[] chbuff = new char[128];
		int l = reader.read(chbuff, 0, 128);
		while(l > 0) {
			strBuilder.append(chbuff, 0, l);
			l = reader.read(chbuff, 0, 128);
		}
		reader.close();
		return strBuilder.toString();
	}
	
	
	public void evaluateSegment(Segment seg) {
		if(seg.getRecencyDays() == null || seg.getRecencyDays() == 0)
			seg.setRecencyDays(1);
		
		DB db = mongo.getDb();
		DBCollection dbCol =  db.getCollection("aggregate" + seg.getRecencyDays() + "d");
		
		int i=0;
		QueryBuilder qb = null;
		String conjunction = null;
		for(SegmentCondition sg : seg.getConditions()){
			int freq = (sg.getMinFrequency() == null || sg.getMinFrequency() == 0)? 1 : sg.getMinFrequency().intValue();
			DBObject[] query = new DBObject[sg.getAttrs().size()];  
			int j=0;
			for(BigInteger attr : sg.getAttrs()) {
				query[j] = QueryBuilder.start("value.A" + attr).greaterThanEquals(freq).get();
				++j;
			}
			QueryBuilder localqb = QueryBuilder.start().or(query);
			if(qb == null)
				qb = localqb;
			else {
				if(conjunction != null && conjunction.equals("OR")) {
					qb = qb.or(localqb.get());
				} else {
					//////////////////////////////////
				}
			}
			
			conjunction = sg.getConjunction();
			++i;
		}
		
		
		
	}
	
	
	public static void main(String[] args) throws Exception{
		Object s = MapReduceJobsImpl.class.getClass().getResourceAsStream("/mapreduce/aggregatedaily/map.js");
		System.out.println("S========" + s);
	}

}
